{"version":3,"sources":["components/SearchInput/SearchInput.js","components/Modal/Modal.js","images/giphy-logo-1.svg","hooks/useGifSearch.js","App.js","index.js"],"names":["SearchInput","userSearchInput","useState","userInput","setUserInput","error","setError","validate","input","match","length","setTimeout","className","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","e","target","value","type","onKeyPress","event","key","Append","Button","variant","onClick","ModalComponent","props","Modal","aria-labelledby","centered","Header","closeButton","Title","id","keyword","Body","src","link","alt","Footer","onHide","useGifSearch","offset","data","gifs","setGifs","totalGifsCount","setTotalGifsCount","useEffect","axios","get","then","res","pagination","total_count","forEach","item","prevGifs","images","original","url","catch","message","App","setOffset","loader","setLoader","userSearchTerm","setUserSearchTerm","modalState","setModalState","gifLink","setGifLink","show","logo","string","dataLength","next","prevOffset","hasMore","Spinner","animation","role","style","color","overflow","display","alignItems","flexDirection","Row","map","gif","index","Col","lg","sm","uuid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebdd9fef.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './searchInput.scss';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nconst SearchInput = ({ userSearchInput }) => {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n\r\n  const validate = (input) => {\r\n    const letters = /^[a-zA-Z0-9 ]*$/;\r\n    input.match(letters) && input.length < 30 ? userSearchInput(userInput) : setError(true);\r\n\r\n    setTimeout(() => {\r\n      setError(false);\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"input_container\">\r\n      <InputGroup className=\"mb-3\">\r\n        <FormControl\r\n          placeholder=\"Search all the GIFs\"\r\n          aria-label=\"Search all the GIFs\"\r\n          aria-describedby=\"basic-addon2\"\r\n          onChange={(e) => setUserInput(e.target.value)}\r\n          value={userInput}\r\n          type=\"input\"\r\n          onKeyPress={(event) => {\r\n            if (event.key === 'Enter') {\r\n              validate(userInput);\r\n            }\r\n          }}\r\n        />\r\n        <InputGroup.Append>\r\n          <Button\r\n            variant=\"outline-secondary\"\r\n            onClick={() => validate(userInput)}\r\n          >\r\n            <i className=\"fas fa-search\"></i>\r\n          </Button>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      <p className={error ? `error show` : `error`}>\r\n        Only letters and numbers are allowed. Search term cannot be longer than 30 characters.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport './modal.scss';\r\n\r\nconst ModalComponent = (props) => {\r\n  return (\r\n    <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {props.keyword}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <img src={props.link} alt=\"gif\" className=\"modal__img\" />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalComponent;\r\n","export default __webpack_public_path__ + \"static/media/giphy-logo-1.685c9731.svg\";","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useGifSearch = (keyword, offset, data) => {\r\n  const [gifs, setGifs] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [totalGifsCount, setTotalGifsCount] = useState(false);\r\n\r\n  // reset gifs and totalGifsCount array if keyword has changed\r\n  useEffect(() => {\r\n    setGifs([]);\r\n    setTotalGifsCount(false);\r\n  }, [keyword]);\r\n\r\n  // request\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.giphy.com/v1/gifs/search?api_key=NIC2mM6UGbGBO2GKMN0rpf1d5PHffluH&q=${keyword}&limit=12&offset=${offset}&rating=g&lang=en`\r\n      )\r\n      .then((res) => {\r\n        // set total gifs count\r\n        totalGifsCount !== res.data.pagination.total_count &&\r\n          setTotalGifsCount(res.data.pagination.total_count);\r\n\r\n        // show error if no gif where found\r\n        res.data.data.length === 0\r\n          ? setError(`No GIFs found for ${keyword}`)\r\n          : setError(``);\r\n\r\n        res.data.data.forEach((item) => {\r\n          setGifs((prevGifs) => {\r\n            return [...prevGifs, item.images.original.url];\r\n          });\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [keyword, offset]);\r\n  return { gifs, error, totalGifsCount };\r\n};\r\n\r\nexport default useGifSearch;\r\n","import React, { useState } from 'react';\r\nimport './App.scss';\r\nimport SearchInput from './components/SearchInput/SearchInput';\r\nimport Modal from './components/Modal/Modal';\r\nimport logo from './images/giphy-logo-1.svg';\r\nimport { Col, Row, Spinner } from 'react-bootstrap';\r\nimport useGifSearch from './hooks/useGifSearch';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport uuid from 'react-uuid';\r\n\r\nfunction App() {\r\n  const [offset, setOffset] = useState(0);\r\n  const [data] = useState([]);\r\n  const [loader, setLoader] = useState(false);\r\n  const [userSearchTerm, setUserSearchTerm] = useState('cat');\r\n  const [modalState, setModalState] = useState(false);\r\n  const [gifLink, setGifLink] = useState('');\r\n\r\n  // data from useGifSearch hook\r\n  const { gifs, error, totalGifsCount } = useGifSearch(\r\n    userSearchTerm,\r\n    offset,\r\n    data\r\n  );\r\n\r\n  // save user search input\r\n  const userSearchInput = (string) => {\r\n    setUserSearchTerm(string);\r\n  };\r\n\r\n  // load more gifs wwhen user scrolls to the bottom of the page\r\n  const loadMoreGifs = () => {\r\n    // if fetched gifs count is equal or greater than totalGifsCount (api) then return\r\n    if (gifs.length >= totalGifsCount) {\r\n      return;\r\n    } else {\r\n      setLoader(true);\r\n      setTimeout(() => {\r\n        setOffset((prevOffset) => {\r\n          return prevOffset + 12;\r\n        });\r\n        setLoader(false);\r\n      }, 1000);\r\n    }\r\n  };\r\n  // show modal and set clicked gif link\r\n  const showModal = (link) => {\r\n    setModalState(true);\r\n    setGifLink(link);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Modal\r\n        show={modalState}\r\n        onHide={() => setModalState(false)}\r\n        link={gifLink}\r\n        keyword={userSearchTerm}\r\n      />\r\n      <div className=\"body\">\r\n        <header>\r\n          <nav>\r\n            <img src={logo} alt=\"logo\" />\r\n            <h1>GIPHY</h1>\r\n          </nav>\r\n          <SearchInput userSearchInput={userSearchInput} />\r\n          <h2>\r\n            {error ? error : userSearchTerm} <span>{totalGifsCount} Gifs</span>\r\n          </h2>\r\n        </header>\r\n        <div className=\"gifs__container\">\r\n          <InfiniteScroll\r\n            dataLength={gifs.length}\r\n            next={loadMoreGifs}\r\n            hasMore={true}\r\n            loader={\r\n              loader && (\r\n                <Spinner animation=\"border\" role=\"status\" variant=\"light\">\r\n                  <span className=\"sr-only\" style={{ color: '#fff' }}>\r\n                    Loading...\r\n                  </span>\r\n                </Spinner>\r\n              )\r\n            }\r\n            style={{\r\n              overflow: 'hidden',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              flexDirection: 'column',\r\n            }}\r\n          >\r\n            <Row>\r\n              {gifs &&\r\n                gifs.map((gif, index) => {\r\n                  return (\r\n                    <Col lg=\"3\" sm=\"2\" className=\"gif__column\" key={uuid()}>\r\n                      <img\r\n                        src={gif}\r\n                        alt=\"gif\"\r\n                        onClick={() => showModal(gif.images.original.url)}\r\n                      />\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </InfiniteScroll>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}